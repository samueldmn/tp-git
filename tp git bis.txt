Faire un fork du dépôt https://github.com/rose-line/sio1-2024-java-grpa (pas par commande Git, c'est sur l'interface GitHub)

Cloner localement votre fork (ne pas cloner le dépôt original)
git clone <lien http>

Quelle est la différence entre un fork et un clonage ?
le fork est une copie d'un dépot distant. le clone vas copier le dépot. il y a une connection entre le fork est le dépot original contrairement a une copie

Indiquer dans quelles circonstances on voudrait forker et/ou cloner un dépôt
le fork pour une base de donné en ligne, un clonage pour le local

Modifier le fichier README.md à la racine du dépôt en ajoutant une ligne quelconque
nano sio1-2024-java-grpa/README.md

On veut maintenant envoyer cette modification vers le dépôt distant
git add README.md
git commit -m "read" 	README.md

Il faut d'abord faire un add/commit local
Puis utiliser la commande qui « pousse » les modifs sur le dépôt GitHub (push)
git push

Vérifier directement sur GitHub que le push a bien fonctionné

Trouver la commande qui affiche le nom du ou des dépôt(s) distant(s) relié(s) avec le dépôt local : cela permet de savoir si le dépôt courant est synchronisé avec un dépôt en ligne ou non
git remote show origin

Merge en local puis push :
Créer une branche locale bugfix1, se déplacer dessus, créer un nouveau fichier ok.java à la racine du dépôt
git branch bugfix1
git checkout bugfix1
touch ok.java

Ajouter ok.java à l'index et faire un commit
git add ok.java
git commit --amend ok.java

Retourner sur master, créer le fichier ajout.java, ajouter à l'index et commit
git checkout master
touch ajout.java
git add ajout.java
git commit ajout.java

Fusionner la branche bugfix1 dans la branche master
git merge bugfix1

Afficher le log des commits ; noter les emplacements des trois branches différentes, en local et en remote
git log  8d3f4d391fb3439d90754a63f0f10416a1caaad2 e0369922b7261ec32a7ac508d71e481190b418c4
Faire un push
Refarire un affichage du log ; origin/master a bougé : que représente cette branche ?

Étudier le résultat sur GitHub, en examinant commits et branches (bouton drop-down sur la page du dépôt pour voir les branches) : qu'est-ce qui est différent de la version locale ?
Le bug est corrigé et intégré ; que doit-on faire de la branche bugfix1 maintenant ?
Supposons que l'on veuille effectivement publier sur le remote une branche sur laquelle on travaille (pour sauvegarde ou pour que d'autres puissent l'utiliser)
Créer une nouvelle branche partage
Aller sur la branche
Ajouter un fichier partage.md
L'inclure dans l'index
Faire un commit
Push
Que se passe-t-il ?
Exécuter la bonne commande pour sauvegarder la branche sur le remote
Vérifier sur GitHub que la branche apparaît bien
La branche partage n'a pas été fusionnée avant le push ; on va utiliser un autre moyen offert par GitHub pour fusionner une branche en remote : la Pull Request
La Pull Request est très utilisée en collaboration : elle permet à l'intégrateur du projet d'examiner les demandes de merge au niveau du remote avant de les accepter (ou non)
Sur GitHub, cliquer sur Pull Request
À gauche, la branche d'intégration (« base », qui reçoit le merge) ; à droite, la branche à fusionner (« compare »)
On doit fusionner ^partage dans master
Si, avant, GitHub vous demande de choisir un repo de base, bien prendre celui qui est sur votre propre compte
Cliquer sur Create Pull Request
Le nouveau formulaire vous permet d'ajouter des informations : titre et commentaire de la pull request, et même upload de fichiers annexes, liens éventuels... Également, on peut ajouter des labels pour étiquetter la pull request et lui affecter un reviewer, qui va officiellement être en charge
Valider
La page résultante informe sur les branches source et cible, sur les commits concernés, les fichiers qui ont été modifiés...
On peut aussi y démarrer une conversation notamment entre l'émetteur de la pull request et l'intégrateur
En discutant de la pull request, on se rend compte que certaines choses devraient être modifiées
Repartir en local pour effectuer une modification sur partage.md et ajouter precision.md
Commit des deux modifs
Push
Observer la pull request : que s'est-il passé ?
Finalement, faire le merge sur la page de la pull request
Noter que l'interface nous propose alors de supprimer la branche devenue inutile ; supprimer la branche
Dans un contexte de travail en collaboration sur un même dépôt, donner un workflow (façon de travailler) possible qui va permettre à tous les intervenants de viser des ajouts à la branche d'intégration, d'en discuter, et ceci sans danger pour la branche d'intégration, avant que finalement l'intégrateur (probablement propriétaire du dépot) accepte les changements